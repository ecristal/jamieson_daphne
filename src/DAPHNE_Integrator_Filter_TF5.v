// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\daphne_integrator_filter\DAPHNE_Integrator_Filter_TF5.v
// Created: 2022-07-05 12:54:38
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.53846e-08
// Target subsystem base rate: 1.53846e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1.53846e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// output_rsvd                   ce_out        1.53846e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DAPHNE_Integrator_Filter_TF5
// Source Path: daphne_integrator_filter/DAPHNE Integrator Filter TF5
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

(* use_dsp  = "yes" *) module DAPHNE_Integrator_Filter_TF5
          (clk,
           reset,
           clk_enable,
           input_rsvd,
           enable,
           ce_out,
           output_rsvd);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] input_rsvd;  // int16
  input   enable;
  output  ce_out;
  output  signed [15:0] output_rsvd;  // int16


  wire enb;
  wire switch_compare_1;
  wire signed [63:0] s_input_acc_cast;  // sfix64_En32
  reg signed [63:0] s_state_out1;  // sfix64_En32
  reg signed [63:0] s_state_out2_1;  // sfix64_En32
  wire signed [95:0] denom_gain2_mul_temp;  // sfix96_En48
  wire signed [63:0] s_denom_gain2;  // sfix64_En32
  wire signed [63:0] s_denom_acc_out2;  // sfix64_En32
  wire signed [95:0] denom_gain1_mul_temp;  // sfix96_En48
  wire signed [63:0] s_denom_gain1;  // sfix64_En32
  wire signed [64:0] denom_acc1_sub_cast;  // sfix65_En32
  wire signed [64:0] denom_acc1_sub_cast_1;  // sfix65_En32
  wire signed [64:0] denom_acc1_sub_temp;  // sfix65_En32
  wire signed [63:0] s_denom_acc_out1;  // sfix64_En32
  wire signed [64:0] denom_acc2_sub_cast;  // sfix65_En32
  wire signed [64:0] denom_acc2_sub_cast_1;  // sfix65_En32
  wire signed [64:0] denom_acc2_sub_temp;  // sfix65_En32
  wire signed [95:0] nume_gain_b0_mul_temp;  // sfix96_En48
  wire signed [63:0] s_nume_gain_b0;  // sfix64_En32
  wire signed [95:0] nume_gain1_mul_temp;  // sfix96_En48
  wire signed [63:0] s_nume_gain1;  // sfix64_En32
  wire signed [64:0] s_nume_acc1_add_cast;  // sfix65_En32
  wire signed [64:0] s_nume_acc1_add_cast_1;  // sfix65_En32
  wire signed [64:0] s_nume_acc1_add_temp;  // sfix65_En32
  wire signed [63:0] s_nume_acc_out1;  // sfix64_En32
  wire signed [95:0] nume_gain2_mul_temp;  // sfix96_En48
  wire signed [63:0] s_nume_gain2;  // sfix64_En32
  wire signed [64:0] s_nume_acc2_add_cast;  // sfix65_En32
  wire signed [64:0] s_nume_acc2_add_cast_1;  // sfix65_En32
  wire signed [64:0] s_nume_acc2_add_temp;  // sfix65_En32
  wire signed [63:0] s_nume_acc_out2;  // sfix64_En32
  wire signed [15:0] s_output_cast;  // int16
  wire signed [15:0] Switch_out1;  // int16


  assign switch_compare_1 = enable == 1'b1;



  assign s_input_acc_cast = {{16{input_rsvd[15]}}, {input_rsvd, 32'b00000000000000000000000000000000}};



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : s_state_out2_process
      if (reset == 1'b1) begin
        s_state_out2_1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          s_state_out2_1 <= s_state_out1;
        end
      end
    end



  assign denom_gain2_mul_temp = 32'sb00000000000000001110001101101011 * s_state_out2_1;
  assign s_denom_gain2 = ((denom_gain2_mul_temp[95] == 1'b0) && (denom_gain2_mul_temp[94:79] != 16'b0000000000000000) ? 64'sh7FFFFFFFFFFFFFFF :
              ((denom_gain2_mul_temp[95] == 1'b1) && (denom_gain2_mul_temp[94:79] != 16'b1111111111111111) ? 64'sh8000000000000000 :
              $signed(denom_gain2_mul_temp[79:16])));



  always @(posedge clk or posedge reset)
    begin : s_state_out1_1_process
      if (reset == 1'b1) begin
        s_state_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          s_state_out1 <= s_denom_acc_out2;
        end
      end
    end



  assign denom_gain1_mul_temp = 32'sb11111111111111100001110011001000 * s_state_out1;
  assign s_denom_gain1 = ((denom_gain1_mul_temp[95] == 1'b0) && (denom_gain1_mul_temp[94:79] != 16'b0000000000000000) ? 64'sh7FFFFFFFFFFFFFFF :
              ((denom_gain1_mul_temp[95] == 1'b1) && (denom_gain1_mul_temp[94:79] != 16'b1111111111111111) ? 64'sh8000000000000000 :
              $signed(denom_gain1_mul_temp[79:16])));



  assign denom_acc1_sub_cast = {s_input_acc_cast[63], s_input_acc_cast};
  assign denom_acc1_sub_cast_1 = {s_denom_gain1[63], s_denom_gain1};
  assign denom_acc1_sub_temp = denom_acc1_sub_cast - denom_acc1_sub_cast_1;
  assign s_denom_acc_out1 = ((denom_acc1_sub_temp[64] == 1'b0) && (denom_acc1_sub_temp[63] != 1'b0) ? 64'sh7FFFFFFFFFFFFFFF :
              ((denom_acc1_sub_temp[64] == 1'b1) && (denom_acc1_sub_temp[63] != 1'b1) ? 64'sh8000000000000000 :
              $signed(denom_acc1_sub_temp[63:0])));



  assign denom_acc2_sub_cast = {s_denom_acc_out1[63], s_denom_acc_out1};
  assign denom_acc2_sub_cast_1 = {s_denom_gain2[63], s_denom_gain2};
  assign denom_acc2_sub_temp = denom_acc2_sub_cast - denom_acc2_sub_cast_1;
  assign s_denom_acc_out2 = ((denom_acc2_sub_temp[64] == 1'b0) && (denom_acc2_sub_temp[63] != 1'b0) ? 64'sh7FFFFFFFFFFFFFFF :
              ((denom_acc2_sub_temp[64] == 1'b1) && (denom_acc2_sub_temp[63] != 1'b1) ? 64'sh8000000000000000 :
              $signed(denom_acc2_sub_temp[63:0])));



  assign nume_gain_b0_mul_temp = 32'sb00000000000000001111000000010010 * s_denom_acc_out2;
  assign s_nume_gain_b0 = ((nume_gain_b0_mul_temp[95] == 1'b0) && (nume_gain_b0_mul_temp[94:79] != 16'b0000000000000000) ? 64'sh7FFFFFFFFFFFFFFF :
              ((nume_gain_b0_mul_temp[95] == 1'b1) && (nume_gain_b0_mul_temp[94:79] != 16'b1111111111111111) ? 64'sh8000000000000000 :
              $signed(nume_gain_b0_mul_temp[79:16])));



  assign nume_gain1_mul_temp = 32'sb11111111111111100010111011110011 * s_state_out1;
  assign s_nume_gain1 = ((nume_gain1_mul_temp[95] == 1'b0) && (nume_gain1_mul_temp[94:79] != 16'b0000000000000000) ? 64'sh7FFFFFFFFFFFFFFF :
              ((nume_gain1_mul_temp[95] == 1'b1) && (nume_gain1_mul_temp[94:79] != 16'b1111111111111111) ? 64'sh8000000000000000 :
              $signed(nume_gain1_mul_temp[79:16])));



  assign s_nume_acc1_add_cast = {s_nume_gain_b0[63], s_nume_gain_b0};
  assign s_nume_acc1_add_cast_1 = {s_nume_gain1[63], s_nume_gain1};
  assign s_nume_acc1_add_temp = s_nume_acc1_add_cast + s_nume_acc1_add_cast_1;
  assign s_nume_acc_out1 = ((s_nume_acc1_add_temp[64] == 1'b0) && (s_nume_acc1_add_temp[63] != 1'b0) ? 64'sh7FFFFFFFFFFFFFFF :
              ((s_nume_acc1_add_temp[64] == 1'b1) && (s_nume_acc1_add_temp[63] != 1'b1) ? 64'sh8000000000000000 :
              $signed(s_nume_acc1_add_temp[63:0])));



  assign nume_gain2_mul_temp = 32'sb00000000000000001110000011111000 * s_state_out2_1;
  assign s_nume_gain2 = ((nume_gain2_mul_temp[95] == 1'b0) && (nume_gain2_mul_temp[94:79] != 16'b0000000000000000) ? 64'sh7FFFFFFFFFFFFFFF :
              ((nume_gain2_mul_temp[95] == 1'b1) && (nume_gain2_mul_temp[94:79] != 16'b1111111111111111) ? 64'sh8000000000000000 :
              $signed(nume_gain2_mul_temp[79:16])));



  assign s_nume_acc2_add_cast = {s_nume_acc_out1[63], s_nume_acc_out1};
  assign s_nume_acc2_add_cast_1 = {s_nume_gain2[63], s_nume_gain2};
  assign s_nume_acc2_add_temp = s_nume_acc2_add_cast + s_nume_acc2_add_cast_1;
  assign s_nume_acc_out2 = ((s_nume_acc2_add_temp[64] == 1'b0) && (s_nume_acc2_add_temp[63] != 1'b0) ? 64'sh7FFFFFFFFFFFFFFF :
              ((s_nume_acc2_add_temp[64] == 1'b1) && (s_nume_acc2_add_temp[63] != 1'b1) ? 64'sh8000000000000000 :
              $signed(s_nume_acc2_add_temp[63:0])));



  assign s_output_cast = ((s_nume_acc_out2[63] == 1'b0) && (s_nume_acc_out2[62:47] != 16'b0000000000000000) ? 16'sb0111111111111111 :
              ((s_nume_acc_out2[63] == 1'b1) && (s_nume_acc_out2[62:47] != 16'b1111111111111111) ? 16'sb1000000000000000 :
              $signed(s_nume_acc_out2[47:32])));



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? input_rsvd :
              s_output_cast);



  assign output_rsvd = Switch_out1;

  assign ce_out = clk_enable;

endmodule  // DAPHNE_Integrator_Filter_TF5

